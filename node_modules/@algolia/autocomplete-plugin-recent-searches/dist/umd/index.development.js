/*! @algolia/autocomplete-plugin-recent-searches 1.5.0 | MIT License | Â© Algolia, Inc. and contributors | https://github.com/algolia/autocomplete */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@algolia/autocomplete-plugin-recent-searches'] = {}));
}(this, (function (exports) { 'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function addHighlightedAttribute(_ref) {
    var item = _ref.item,
        query = _ref.query;
    return _objectSpread2(_objectSpread2({}, item), {}, {
      _highlightResult: {
        label: {
          value: query ? item.label.replace(new RegExp(query.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'gi'), function (match) {
            return "__aa-highlight__".concat(match, "__/aa-highlight__");
          }) : item.label
        }
      }
    });
  }

  var LOCAL_STORAGE_KEY = 'AUTOCOMPLETE_RECENT_SEARCHES';
  var LOCAL_STORAGE_KEY_TEST = '__AUTOCOMPLETE_RECENT_SEARCHES_PLUGIN_TEST_KEY__';

  function isLocalStorageSupported() {
    try {
      localStorage.setItem(LOCAL_STORAGE_KEY_TEST, '');
      localStorage.removeItem(LOCAL_STORAGE_KEY_TEST);
      return true;
    } catch (error) {
      return false;
    }
  }

  function getLocalStorage(_ref) {
    var key = _ref.key;

    if (!isLocalStorageSupported()) {
      return {
        setItem: function setItem() {},
        getItem: function getItem() {
          return [];
        }
      };
    }

    return {
      setItem: function setItem(items) {
        return window.localStorage.setItem(key, JSON.stringify(items));
      },
      getItem: function getItem() {
        var items = window.localStorage.getItem(key);
        return items ? JSON.parse(items) : [];
      }
    };
  }

  function createLocalStorage(_ref) {
    var key = _ref.key,
        limit = _ref.limit,
        search = _ref.search;
    var storage = getLocalStorage({
      key: key
    });
    return {
      onAdd: function onAdd(item) {
        storage.setItem([item].concat(_toConsumableArray(storage.getItem())));
      },
      onRemove: function onRemove(id) {
        storage.setItem(storage.getItem().filter(function (x) {
          return x.id !== id;
        }));
      },
      getAll: function getAll() {
        var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        return search({
          query: query,
          items: storage.getItem(),
          limit: limit
        }).slice(0, limit);
      }
    };
  }

  function createRef(initialValue) {
    return {
      current: initialValue
    };
  }

  var warnCache = {
    current: {}
  };
  /**
   * Logs a warning if the condition is not met.
   * This is used to log issues in development environment only.
   */

  function warn(condition, message) {

    if (condition) {
      return;
    }

    var sanitizedMessage = message.trim();
    var hasAlreadyPrinted = warnCache.current[sanitizedMessage];

    if (!hasAlreadyPrinted) {
      warnCache.current[sanitizedMessage] = true; // eslint-disable-next-line no-console

      console.warn("[Autocomplete] ".concat(sanitizedMessage));
    }
  }

  function createStorageApi(storage) {
    return {
      addItem: function addItem(item) {
        storage.onRemove(item.id);
        storage.onAdd(item);
      },
      removeItem: function removeItem(id) {
        storage.onRemove(id);
      },
      getAll: function getAll(query) {
        return storage.getAll(query);
      }
    };
  }

  /** @jsx createElement */
  function getTemplates(_ref) {
    var onRemove = _ref.onRemove,
        onTapAhead = _ref.onTapAhead;
    return {
      item: function item(_ref2) {
        var item = _ref2.item,
            createElement = _ref2.createElement,
            components = _ref2.components;
        return createElement("div", {
          className: "aa-ItemWrapper"
        }, createElement("div", {
          className: "aa-ItemContent"
        }, createElement("div", {
          className: "aa-ItemIcon aa-ItemIcon--noBorder"
        }, createElement("svg", {
          viewBox: "0 0 24 24",
          fill: "currentColor"
        }, createElement("path", {
          d: "M12.516 6.984v5.25l4.5 2.672-0.75 1.266-5.25-3.188v-6h1.5zM12 20.016q3.281 0 5.648-2.367t2.367-5.648-2.367-5.648-5.648-2.367-5.648 2.367-2.367 5.648 2.367 5.648 5.648 2.367zM12 2.016q4.125 0 7.055 2.93t2.93 7.055-2.93 7.055-7.055 2.93-7.055-2.93-2.93-7.055 2.93-7.055 7.055-2.93z"
        }))), createElement("div", {
          className: "aa-ItemContentBody"
        }, createElement("div", {
          className: "aa-ItemContentTitle"
        }, createElement(components.ReverseHighlight, {
          hit: item,
          attribute: "label"
        }), item.category && createElement("span", {
          className: "aa-ItemContentSubtitle aa-ItemContentSubtitle--inline"
        }, createElement("span", {
          className: "aa-ItemContentSubtitleIcon"
        }), " in", ' ', createElement("span", {
          className: "aa-ItemContentSubtitleCategory"
        }, item.category))))), createElement("div", {
          className: "aa-ItemActions"
        }, createElement("button", {
          className: "aa-ItemActionButton",
          title: "Remove this search",
          onClick: function onClick(event) {
            event.preventDefault();
            event.stopPropagation();
            onRemove(item.id);
          }
        }, createElement("svg", {
          viewBox: "0 0 24 24",
          fill: "currentColor"
        }, createElement("path", {
          d: "M18 7v13c0 0.276-0.111 0.525-0.293 0.707s-0.431 0.293-0.707 0.293h-10c-0.276 0-0.525-0.111-0.707-0.293s-0.293-0.431-0.293-0.707v-13zM17 5v-1c0-0.828-0.337-1.58-0.879-2.121s-1.293-0.879-2.121-0.879h-4c-0.828 0-1.58 0.337-2.121 0.879s-0.879 1.293-0.879 2.121v1h-4c-0.552 0-1 0.448-1 1s0.448 1 1 1h1v13c0 0.828 0.337 1.58 0.879 2.121s1.293 0.879 2.121 0.879h10c0.828 0 1.58-0.337 2.121-0.879s0.879-1.293 0.879-2.121v-13h1c0.552 0 1-0.448 1-1s-0.448-1-1-1zM9 5v-1c0-0.276 0.111-0.525 0.293-0.707s0.431-0.293 0.707-0.293h4c0.276 0 0.525 0.111 0.707 0.293s0.293 0.431 0.293 0.707v1zM9 11v6c0 0.552 0.448 1 1 1s1-0.448 1-1v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1zM13 11v6c0 0.552 0.448 1 1 1s1-0.448 1-1v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1z"
        }))), createElement("button", {
          className: "aa-ItemActionButton",
          title: "Fill query with \"".concat(item.label, "\""),
          onClick: function onClick(event) {
            event.preventDefault();
            event.stopPropagation();
            onTapAhead(item);
          }
        }, createElement("svg", {
          viewBox: "0 0 24 24",
          fill: "currentColor"
        }, createElement("path", {
          d: "M8 17v-7.586l8.293 8.293c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414l-8.293-8.293h7.586c0.552 0 1-0.448 1-1s-0.448-1-1-1h-10c-0.552 0-1 0.448-1 1v10c0 0.552 0.448 1 1 1s1-0.448 1-1z"
        })))));
      }
    };
  }

  function getDefaultSubcribe(store) {
    return function subscribe(_ref) {
      var onSelect = _ref.onSelect;
      onSelect(function (_ref2) {
        var item = _ref2.item,
            state = _ref2.state,
            source = _ref2.source;
        var inputValue = source.getItemInputValue({
          item: item,
          state: state
        });

        if (source.sourceId === 'querySuggestionsPlugin' && inputValue) {
          var recentItem = {
            id: inputValue,
            label: inputValue,
            category: item.__autocomplete_qsCategory
          };
          store.addItem(recentItem);
        }
      });
    };
  }

  function createRecentSearchesPlugin(options) {
    var _getOptions = getOptions(options),
        storage = _getOptions.storage,
        transformSource = _getOptions.transformSource,
        subscribe = _getOptions.subscribe;

    var store = createStorageApi(storage);
    var lastItemsRef = createRef([]);
    return {
      name: 'aa.recentSearchesPlugin',
      subscribe: subscribe !== null && subscribe !== void 0 ? subscribe : getDefaultSubcribe(store),
      onSubmit: function onSubmit(_ref3) {
        var state = _ref3.state;
        var query = state.query;

        if (query) {
          var recentItem = {
            id: query,
            label: query
          };
          store.addItem(recentItem);
        }
      },
      getSources: function getSources(_ref4) {
        var query = _ref4.query,
            setQuery = _ref4.setQuery,
            refresh = _ref4.refresh,
            state = _ref4.state;
        lastItemsRef.current = store.getAll(query);

        function onRemove(id) {
          store.removeItem(id);
          refresh();
        }

        function onTapAhead(item) {
          setQuery(item.label);
          refresh();
        }

        return Promise.resolve(lastItemsRef.current).then(function (items) {
          if (items.length === 0) {
            return [];
          }

          return [transformSource({
            source: {
              sourceId: 'recentSearchesPlugin',
              getItemInputValue: function getItemInputValue(_ref5) {
                var item = _ref5.item;
                return item.label;
              },
              getItems: function getItems() {
                return items;
              },
              templates: getTemplates({
                onRemove: onRemove,
                onTapAhead: onTapAhead
              })
            },
            onRemove: onRemove,
            onTapAhead: onTapAhead,
            state: state
          })];
        });
      },
      data: _objectSpread2(_objectSpread2({}, store), {}, {
        // @ts-ignore SearchOptions `facetFilters` is ReadonlyArray
        getAlgoliaSearchParams: function getAlgoliaSearchParams() {
          var _params$facetFilters, _params$hitsPerPage;

          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          // If the items returned by `store.getAll` are contained in a Promise,
          // we cannot provide the search params in time when this function is called
          // because we need to resolve the promise before getting the value.
          if (!Array.isArray(lastItemsRef.current)) {
            "development" !== 'production' ? warn(false, 'The `getAlgoliaSearchParams` function is not supported with storages that return promises in `getAll`.') : void 0;
            return params;
          }

          return _objectSpread2(_objectSpread2({}, params), {}, {
            facetFilters: [].concat(_toConsumableArray((_params$facetFilters = params.facetFilters) !== null && _params$facetFilters !== void 0 ? _params$facetFilters : []), _toConsumableArray(lastItemsRef.current.map(function (item) {
              return ["objectID:-".concat(item.label)];
            }))),
            hitsPerPage: Math.max(1, ((_params$hitsPerPage = params.hitsPerPage) !== null && _params$hitsPerPage !== void 0 ? _params$hitsPerPage : 10) - lastItemsRef.current.length)
          });
        }
      }),
      __autocomplete_pluginOptions: options
    };
  }

  function getOptions(options) {
    return _objectSpread2({
      transformSource: function transformSource(_ref6) {
        var source = _ref6.source;
        return source;
      }
    }, options);
  }

  function search(_ref) {
    var query = _ref.query,
        items = _ref.items,
        limit = _ref.limit;

    if (!query) {
      return items.slice(0, limit).map(function (item) {
        return addHighlightedAttribute({
          item: item,
          query: query
        });
      });
    }

    return items.filter(function (item) {
      return item.label.toLowerCase().includes(query.toLowerCase());
    }).slice(0, limit).map(function (item) {
      return addHighlightedAttribute({
        item: item,
        query: query
      });
    });
  }

  function createLocalStorageRecentSearchesPlugin(options) {
    var _getOptions = getOptions$1(options),
        key = _getOptions.key,
        limit = _getOptions.limit,
        transformSource = _getOptions.transformSource,
        search = _getOptions.search,
        subscribe = _getOptions.subscribe;

    var storage = createLocalStorage({
      key: [LOCAL_STORAGE_KEY, key].join(':'),
      limit: limit,
      search: search
    });
    var recentSearchesPlugin = createRecentSearchesPlugin({
      transformSource: transformSource,
      storage: storage,
      subscribe: subscribe
    });
    return _objectSpread2(_objectSpread2({}, recentSearchesPlugin), {}, {
      name: 'aa.localStorageRecentSearchesPlugin',
      __autocomplete_pluginOptions: options
    });
  }

  function getOptions$1(options) {
    return _objectSpread2({
      limit: 5,
      search: search,
      transformSource: function transformSource(_ref) {
        var source = _ref.source;
        return source;
      }
    }, options);
  }

  exports.addHighlightedAttribute = addHighlightedAttribute;
  exports.createLocalStorageRecentSearchesPlugin = createLocalStorageRecentSearchesPlugin;
  exports.createRecentSearchesPlugin = createRecentSearchesPlugin;
  exports.getTemplates = getTemplates;
  exports.search = search;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.development.js.map
