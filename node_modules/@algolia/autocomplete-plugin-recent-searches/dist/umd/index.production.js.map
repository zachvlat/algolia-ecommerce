{"version":3,"file":"index.production.js","sources":["../../src/addHighlightedAttribute.ts","../../src/constants.ts","../../src/getLocalStorage.ts","../../src/getTemplates.tsx","../../src/createRecentSearchesPlugin.ts","../../src/createStorageApi.ts","../../../autocomplete-shared/dist/esm/createRef.js","../../src/search.ts","../../src/createLocalStorageRecentSearchesPlugin.ts","../../src/createLocalStorage.ts"],"sourcesContent":["import { Highlighted, HistoryItem } from './types';\n\ntype HighlightParams<TItem> = {\n  item: TItem;\n  query: string;\n};\n\nexport function addHighlightedAttribute<TItem extends HistoryItem>({\n  item,\n  query,\n}: HighlightParams<TItem>): Highlighted<TItem> {\n  return {\n    ...item,\n    _highlightResult: {\n      label: {\n        value: query\n          ? item.label.replace(\n              new RegExp(query.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'gi'),\n              (match) => {\n                return `__aa-highlight__${match}__/aa-highlight__`;\n              }\n            )\n          : item.label,\n      },\n    },\n  };\n}\n","export const LOCAL_STORAGE_KEY = 'AUTOCOMPLETE_RECENT_SEARCHES';\nexport const LOCAL_STORAGE_KEY_TEST =\n  '__AUTOCOMPLETE_RECENT_SEARCHES_PLUGIN_TEST_KEY__';\n","import { LOCAL_STORAGE_KEY_TEST } from './constants';\n\nfunction isLocalStorageSupported() {\n  try {\n    localStorage.setItem(LOCAL_STORAGE_KEY_TEST, '');\n    localStorage.removeItem(LOCAL_STORAGE_KEY_TEST);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\ntype LocalStorageProps = {\n  key: string;\n};\n\nexport function getLocalStorage<TItem>({ key }: LocalStorageProps) {\n  if (!isLocalStorageSupported()) {\n    return {\n      setItem() {},\n      getItem() {\n        return [];\n      },\n    };\n  }\n\n  return {\n    setItem(items: TItem[]) {\n      return window.localStorage.setItem(key, JSON.stringify(items));\n    },\n    getItem(): TItem[] {\n      const items = window.localStorage.getItem(key);\n\n      return items ? (JSON.parse(items) as TItem[]) : [];\n    },\n  };\n}\n","/** @jsx createElement */\nimport { SourceTemplates } from '@algolia/autocomplete-js';\n\nimport { RecentSearchesItem } from './types';\n\nexport type GetTemplatesParams<TItem extends RecentSearchesItem> = {\n  onRemove(id: string): void;\n  onTapAhead(item: TItem): void;\n};\n\nexport function getTemplates<TItem extends RecentSearchesItem>({\n  onRemove,\n  onTapAhead,\n}: GetTemplatesParams<TItem>): SourceTemplates<TItem> {\n  return {\n    item({ item, createElement, components }) {\n      return (\n        <div className=\"aa-ItemWrapper\">\n          <div className=\"aa-ItemContent\">\n            <div className=\"aa-ItemIcon aa-ItemIcon--noBorder\">\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12.516 6.984v5.25l4.5 2.672-0.75 1.266-5.25-3.188v-6h1.5zM12 20.016q3.281 0 5.648-2.367t2.367-5.648-2.367-5.648-5.648-2.367-5.648 2.367-2.367 5.648 2.367 5.648 5.648 2.367zM12 2.016q4.125 0 7.055 2.93t2.93 7.055-2.93 7.055-7.055 2.93-7.055-2.93-2.93-7.055 2.93-7.055 7.055-2.93z\" />\n              </svg>\n            </div>\n            <div className=\"aa-ItemContentBody\">\n              <div className=\"aa-ItemContentTitle\">\n                <components.ReverseHighlight hit={item} attribute=\"label\" />\n                {item.category && (\n                  <span className=\"aa-ItemContentSubtitle aa-ItemContentSubtitle--inline\">\n                    <span className=\"aa-ItemContentSubtitleIcon\" /> in{' '}\n                    <span className=\"aa-ItemContentSubtitleCategory\">\n                      {item.category}\n                    </span>\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"aa-ItemActions\">\n            <button\n              className=\"aa-ItemActionButton\"\n              title=\"Remove this search\"\n              onClick={(event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onRemove(item.id);\n              }}\n            >\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M18 7v13c0 0.276-0.111 0.525-0.293 0.707s-0.431 0.293-0.707 0.293h-10c-0.276 0-0.525-0.111-0.707-0.293s-0.293-0.431-0.293-0.707v-13zM17 5v-1c0-0.828-0.337-1.58-0.879-2.121s-1.293-0.879-2.121-0.879h-4c-0.828 0-1.58 0.337-2.121 0.879s-0.879 1.293-0.879 2.121v1h-4c-0.552 0-1 0.448-1 1s0.448 1 1 1h1v13c0 0.828 0.337 1.58 0.879 2.121s1.293 0.879 2.121 0.879h10c0.828 0 1.58-0.337 2.121-0.879s0.879-1.293 0.879-2.121v-13h1c0.552 0 1-0.448 1-1s-0.448-1-1-1zM9 5v-1c0-0.276 0.111-0.525 0.293-0.707s0.431-0.293 0.707-0.293h4c0.276 0 0.525 0.111 0.707 0.293s0.293 0.431 0.293 0.707v1zM9 11v6c0 0.552 0.448 1 1 1s1-0.448 1-1v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1zM13 11v6c0 0.552 0.448 1 1 1s1-0.448 1-1v-6c0-0.552-0.448-1-1-1s-1 0.448-1 1z\" />\n              </svg>\n            </button>\n            <button\n              className=\"aa-ItemActionButton\"\n              title={`Fill query with \"${item.label}\"`}\n              onClick={(event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onTapAhead(item);\n              }}\n            >\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M8 17v-7.586l8.293 8.293c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414l-8.293-8.293h7.586c0.552 0 1-0.448 1-1s-0.448-1-1-1h-10c-0.552 0-1 0.448-1 1v10c0 0.552 0.448 1 1 1s1-0.448 1-1z\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      );\n    },\n  };\n}\n","import { PluginSubscribeParams } from '@algolia/autocomplete-core';\nimport {\n  AutocompleteSource,\n  AutocompleteState,\n  AutocompletePlugin,\n} from '@algolia/autocomplete-js';\nimport { createRef, MaybePromise, warn } from '@algolia/autocomplete-shared';\nimport { SearchOptions } from '@algolia/client-search';\n\nimport { createStorageApi } from './createStorageApi';\nimport { getTemplates } from './getTemplates';\nimport { RecentSearchesItem, Storage, StorageApi } from './types';\n\nexport interface RecentSearchesPluginData<TItem extends RecentSearchesItem>\n  extends StorageApi<TItem> {\n  /**\n   * Optimized [Algolia search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/). This is useful when using the plugin along with the [Query Suggestions](createQuerySuggestionsPlugin) plugin.\n   *\n   * This function enhances the provided search parameters by:\n   * - Excluding Query Suggestions that are already displayed in recent searches.\n   * - Using a shared `hitsPerPage` value to get a group limit of Query Suggestions and recent searches.\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-recent-searches/createLocalStorageRecentSearchesPlugin/#param-getalgoliasearchparams\n   */\n  getAlgoliaSearchParams(params?: SearchOptions): SearchOptions;\n}\n\nexport type CreateRecentSearchesPluginParams<\n  TItem extends RecentSearchesItem\n> = {\n  /**\n   * The storage to fetch from and save recent searches into.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-recent-searches/createRecentSearchesPlugin/#param-storage\n   */\n  storage: Storage<TItem>;\n  /**\n   * A function to transform the provided source.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-recent-searches/createRecentSearchesPlugin/#param-transformsource\n   */\n  transformSource?(params: {\n    source: AutocompleteSource<TItem>;\n    state: AutocompleteState<TItem>;\n    onRemove(id: string): void;\n    onTapAhead(item: TItem): void;\n  }): AutocompleteSource<TItem>;\n  subscribe?(params: PluginSubscribeParams<TItem>): void;\n};\n\nfunction getDefaultSubcribe<TItem extends RecentSearchesItem>(\n  store: StorageApi<TItem>\n) {\n  return function subscribe({ onSelect }: PluginSubscribeParams<TItem>) {\n    onSelect(({ item, state, source }) => {\n      const inputValue = source.getItemInputValue({ item, state });\n\n      if (source.sourceId === 'querySuggestionsPlugin' && inputValue) {\n        const recentItem: RecentSearchesItem = {\n          id: inputValue,\n          label: inputValue,\n          category: (item as any).__autocomplete_qsCategory,\n        };\n        store.addItem(recentItem as TItem);\n      }\n    });\n  };\n}\n\nexport function createRecentSearchesPlugin<TItem extends RecentSearchesItem>(\n  options: CreateRecentSearchesPluginParams<TItem>\n): AutocompletePlugin<TItem, RecentSearchesPluginData<TItem>> {\n  const { storage, transformSource, subscribe } = getOptions(options);\n  const store = createStorageApi<TItem>(storage);\n  const lastItemsRef = createRef<MaybePromise<TItem[]>>([]);\n\n  return {\n    name: 'aa.recentSearchesPlugin',\n    subscribe: subscribe ?? getDefaultSubcribe(store),\n    onSubmit({ state }) {\n      const { query } = state;\n\n      if (query) {\n        const recentItem: RecentSearchesItem = {\n          id: query,\n          label: query,\n        };\n        store.addItem(recentItem as TItem);\n      }\n    },\n    getSources({ query, setQuery, refresh, state }) {\n      lastItemsRef.current = store.getAll(query);\n\n      function onRemove(id: string) {\n        store.removeItem(id);\n        refresh();\n      }\n\n      function onTapAhead(item: TItem) {\n        setQuery(item.label);\n        refresh();\n      }\n\n      return Promise.resolve(lastItemsRef.current).then((items) => {\n        if (items.length === 0) {\n          return [];\n        }\n\n        return [\n          transformSource({\n            source: {\n              sourceId: 'recentSearchesPlugin',\n              getItemInputValue({ item }) {\n                return item.label;\n              },\n              getItems() {\n                return items;\n              },\n              templates: getTemplates({ onRemove, onTapAhead }),\n            },\n            onRemove,\n            onTapAhead,\n            state: state as AutocompleteState<TItem>,\n          }),\n        ];\n      });\n    },\n    data: {\n      ...store,\n      // @ts-ignore SearchOptions `facetFilters` is ReadonlyArray\n      getAlgoliaSearchParams(params = {}) {\n        // If the items returned by `store.getAll` are contained in a Promise,\n        // we cannot provide the search params in time when this function is called\n        // because we need to resolve the promise before getting the value.\n        if (!Array.isArray(lastItemsRef.current)) {\n          warn(\n            false,\n            'The `getAlgoliaSearchParams` function is not supported with storages that return promises in `getAll`.'\n          );\n          return params;\n        }\n\n        return {\n          ...params,\n          facetFilters: [\n            ...(params.facetFilters ?? []),\n            // @TODO: we need to base the filter on the `query` attribute, not\n            // `objectID`, because the Query Suggestions index cannot ensure\n            // that the `objectID` will always be equal to the query.\n            ...lastItemsRef.current.map((item) => [`objectID:-${item.label}`]),\n          ],\n          hitsPerPage: Math.max(\n            1,\n            (params.hitsPerPage ?? 10) - lastItemsRef.current.length\n          ),\n        };\n      },\n    },\n    __autocomplete_pluginOptions: options,\n  };\n}\n\nfunction getOptions<TItem extends RecentSearchesItem>(\n  options: CreateRecentSearchesPluginParams<TItem>\n) {\n  return {\n    transformSource: ({ source }) => source,\n    ...options,\n  };\n}\n","import { HistoryItem, Storage, StorageApi } from './types';\n\nexport function createStorageApi<TItem extends HistoryItem>(\n  storage: Storage<TItem>\n): StorageApi<TItem> {\n  return {\n    addItem(item) {\n      storage.onRemove(item.id);\n      storage.onAdd(item);\n    },\n    removeItem(id) {\n      storage.onRemove(id);\n    },\n    getAll(query) {\n      return storage.getAll(query);\n    },\n  };\n}\n","export function createRef(initialValue) {\n  return {\n    current: initialValue\n  };\n}","import { addHighlightedAttribute } from './addHighlightedAttribute';\nimport { Highlighted, RecentSearchesItem } from './types';\n\nexport type SearchParams<TItem extends RecentSearchesItem> = {\n  query: string;\n  items: TItem[];\n  limit: number;\n};\n\nexport function search<TItem extends RecentSearchesItem>({\n  query,\n  items,\n  limit,\n}: SearchParams<TItem>): Array<Highlighted<TItem>> {\n  if (!query) {\n    return items\n      .slice(0, limit)\n      .map((item) => addHighlightedAttribute({ item, query }));\n  }\n\n  return items\n    .filter((item) => item.label.toLowerCase().includes(query.toLowerCase()))\n    .slice(0, limit)\n    .map((item) => addHighlightedAttribute({ item, query }));\n}\n","import { AutocompletePlugin } from '@algolia/autocomplete-js';\n\nimport { LOCAL_STORAGE_KEY } from './constants';\nimport { createLocalStorage } from './createLocalStorage';\nimport {\n  createRecentSearchesPlugin,\n  CreateRecentSearchesPluginParams,\n  RecentSearchesPluginData,\n} from './createRecentSearchesPlugin';\nimport { search as defaultSearch, SearchParams } from './search';\nimport { Highlighted, RecentSearchesItem } from './types';\n\nexport type CreateRecentSearchesLocalStorageOptions<\n  TItem extends RecentSearchesItem\n> = {\n  /**\n   * A local storage key to identify where to save and retrieve the recent searches.\n   *\n   * For example:\n   * - \"navbar\"\n   * - \"search\"\n   * - \"main\"\n   *\n   * The plugin namespaces all keys to avoid collisions.\n   *\n   * @example \"top_searchbar\"\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-recent-searches/createLocalStorageRecentSearchesPlugin/#param-key\n   */\n  key: string;\n\n  /**\n   * The number of recent searches to display.\n   *\n   * @default 5\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-recent-searches/createLocalStorageRecentSearchesPlugin/#param-limit\n   */\n  limit?: number;\n\n  /**\n   * A search function to retrieve recent searches from.\n   *\n   * This function is called in [`storage.getAll`](https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-recent-searches/createRecentSearchesPlugin/#param-storage) to retrieve recent searches and is useful to filter and highlight recent searches when typing a query.\n   *\n   * @link https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-plugin-recent-searches/createLocalStorageRecentSearchesPlugin/#param-search\n   */\n  search?(params: SearchParams<TItem>): Array<Highlighted<TItem>>;\n};\n\ntype LocalStorageRecentSearchesPluginOptions<\n  TItem extends RecentSearchesItem\n> = Pick<\n  CreateRecentSearchesPluginParams<TItem>,\n  'transformSource' | 'subscribe'\n> &\n  CreateRecentSearchesLocalStorageOptions<TItem>;\n\nexport function createLocalStorageRecentSearchesPlugin<\n  TItem extends RecentSearchesItem\n>(\n  options: LocalStorageRecentSearchesPluginOptions<TItem>\n): AutocompletePlugin<TItem, RecentSearchesPluginData<TItem>> {\n  const { key, limit, transformSource, search, subscribe } = getOptions(\n    options\n  );\n  const storage = createLocalStorage<TItem>({\n    key: [LOCAL_STORAGE_KEY, key].join(':'),\n    limit,\n    search,\n  });\n\n  const recentSearchesPlugin = createRecentSearchesPlugin<TItem>({\n    transformSource,\n    storage,\n    subscribe,\n  });\n\n  return {\n    ...recentSearchesPlugin,\n    name: 'aa.localStorageRecentSearchesPlugin',\n    __autocomplete_pluginOptions: options,\n  };\n}\n\nfunction getOptions<TItem extends RecentSearchesItem>(\n  options: LocalStorageRecentSearchesPluginOptions<TItem>\n) {\n  return {\n    limit: 5,\n    search: defaultSearch,\n    transformSource: ({ source }) => source,\n    ...options,\n  };\n}\n","import { CreateRecentSearchesLocalStorageOptions } from './createLocalStorageRecentSearchesPlugin';\nimport { getLocalStorage } from './getLocalStorage';\nimport { HistoryItem, Storage } from './types';\n\nexport type CreateLocalStorageProps<TItem extends HistoryItem> = Required<\n  CreateRecentSearchesLocalStorageOptions<TItem>\n>;\n\nexport function createLocalStorage<TItem extends HistoryItem>({\n  key,\n  limit,\n  search,\n}: CreateLocalStorageProps<TItem>): Storage<TItem> {\n  const storage = getLocalStorage<TItem>({ key });\n\n  return {\n    onAdd(item) {\n      storage.setItem([item, ...storage.getItem()]);\n    },\n    onRemove(id) {\n      storage.setItem(storage.getItem().filter((x) => x.id !== id));\n    },\n    getAll(query = '') {\n      return search({ query, items: storage.getItem(), limit }).slice(0, limit);\n    },\n  };\n}\n"],"names":["addHighlightedAttribute","item","query","_highlightResult","label","value","replace","RegExp","match","LOCAL_STORAGE_KEY","LOCAL_STORAGE_KEY_TEST","getLocalStorage","key","localStorage","setItem","removeItem","error","isLocalStorageSupported","items","window","JSON","stringify","getItem","parse","getTemplates","onRemove","onTapAhead","createElement","components","className","viewBox","fill","d","ReverseHighlight","hit","attribute","category","title","onClick","event","preventDefault","stopPropagation","id","getDefaultSubcribe","store","onSelect","state","source","inputValue","getItemInputValue","sourceId","recentItem","__autocomplete_qsCategory","addItem","createRecentSearchesPlugin","options","transformSource","getOptions","storage","subscribe","onAdd","getAll","createStorageApi","lastItemsRef","current","name","onSubmit","getSources","setQuery","refresh","Promise","resolve","then","length","getItems","templates","data","getAlgoliaSearchParams","params","Array","isArray","facetFilters","map","hitsPerPage","Math","max","__autocomplete_pluginOptions","search","limit","filter","toLowerCase","includes","slice","defaultSearch","x","createLocalStorage","join"],"mappings":"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"}